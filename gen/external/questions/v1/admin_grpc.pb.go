// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: external/questions/v1/admin.proto

package questionsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionsAdminService_GetQuestions_FullMethodName         = "/questions.v1.QuestionsAdminService/GetQuestions"
	QuestionsAdminService_CreateQuestion_FullMethodName       = "/questions.v1.QuestionsAdminService/CreateQuestion"
	QuestionsAdminService_UpdateCategory_FullMethodName       = "/questions.v1.QuestionsAdminService/UpdateCategory"
	QuestionsAdminService_UpdateQuestion_FullMethodName       = "/questions.v1.QuestionsAdminService/UpdateQuestion"
	QuestionsAdminService_UpdateQuestionOption_FullMethodName = "/questions.v1.QuestionsAdminService/UpdateQuestionOption"
	QuestionsAdminService_DeleteQuestion_FullMethodName       = "/questions.v1.QuestionsAdminService/DeleteQuestion"
	QuestionsAdminService_DeleteQuestionOption_FullMethodName = "/questions.v1.QuestionsAdminService/DeleteQuestionOption"
)

// QuestionsAdminServiceClient is the client API for QuestionsAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionsAdminServiceClient interface {
	GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error)
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateQuestionOption(ctx context.Context, in *UpdateQuestionOptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteQuestionOption(ctx context.Context, in *DeleteQuestionOptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type questionsAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionsAdminServiceClient(cc grpc.ClientConnInterface) QuestionsAdminServiceClient {
	return &questionsAdminServiceClient{cc}
}

func (c *questionsAdminServiceClient) GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionsAdminService_GetQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsAdminServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuestionsAdminService_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsAdminServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuestionsAdminService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsAdminServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuestionsAdminService_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsAdminServiceClient) UpdateQuestionOption(ctx context.Context, in *UpdateQuestionOptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuestionsAdminService_UpdateQuestionOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsAdminServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuestionsAdminService_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionsAdminServiceClient) DeleteQuestionOption(ctx context.Context, in *DeleteQuestionOptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuestionsAdminService_DeleteQuestionOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionsAdminServiceServer is the server API for QuestionsAdminService service.
// All implementations should embed UnimplementedQuestionsAdminServiceServer
// for forward compatibility.
type QuestionsAdminServiceServer interface {
	GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error)
	CreateQuestion(context.Context, *CreateQuestionRequest) (*emptypb.Empty, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*emptypb.Empty, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*emptypb.Empty, error)
	UpdateQuestionOption(context.Context, *UpdateQuestionOptionRequest) (*emptypb.Empty, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*emptypb.Empty, error)
	DeleteQuestionOption(context.Context, *DeleteQuestionOptionRequest) (*emptypb.Empty, error)
}

// UnimplementedQuestionsAdminServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionsAdminServiceServer struct{}

func (UnimplementedQuestionsAdminServiceServer) GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedQuestionsAdminServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionsAdminServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedQuestionsAdminServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionsAdminServiceServer) UpdateQuestionOption(context.Context, *UpdateQuestionOptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionOption not implemented")
}
func (UnimplementedQuestionsAdminServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionsAdminServiceServer) DeleteQuestionOption(context.Context, *DeleteQuestionOptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionOption not implemented")
}
func (UnimplementedQuestionsAdminServiceServer) testEmbeddedByValue() {}

// UnsafeQuestionsAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionsAdminServiceServer will
// result in compilation errors.
type UnsafeQuestionsAdminServiceServer interface {
	mustEmbedUnimplementedQuestionsAdminServiceServer()
}

func RegisterQuestionsAdminServiceServer(s grpc.ServiceRegistrar, srv QuestionsAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionsAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionsAdminService_ServiceDesc, srv)
}

func _QuestionsAdminService_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsAdminServiceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsAdminService_GetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsAdminServiceServer).GetQuestions(ctx, req.(*GetQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionsAdminService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsAdminServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsAdminService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsAdminServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionsAdminService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsAdminServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsAdminService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsAdminServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionsAdminService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsAdminServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsAdminService_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsAdminServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionsAdminService_UpdateQuestionOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsAdminServiceServer).UpdateQuestionOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsAdminService_UpdateQuestionOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsAdminServiceServer).UpdateQuestionOption(ctx, req.(*UpdateQuestionOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionsAdminService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsAdminServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsAdminService_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsAdminServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionsAdminService_DeleteQuestionOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionsAdminServiceServer).DeleteQuestionOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionsAdminService_DeleteQuestionOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionsAdminServiceServer).DeleteQuestionOption(ctx, req.(*DeleteQuestionOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionsAdminService_ServiceDesc is the grpc.ServiceDesc for QuestionsAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionsAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "questions.v1.QuestionsAdminService",
	HandlerType: (*QuestionsAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestions",
			Handler:    _QuestionsAdminService_GetQuestions_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionsAdminService_CreateQuestion_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _QuestionsAdminService_UpdateCategory_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _QuestionsAdminService_UpdateQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestionOption",
			Handler:    _QuestionsAdminService_UpdateQuestionOption_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QuestionsAdminService_DeleteQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestionOption",
			Handler:    _QuestionsAdminService_DeleteQuestionOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/questions/v1/admin.proto",
}
